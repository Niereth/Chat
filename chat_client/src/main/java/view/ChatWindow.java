package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;
import model.Observer;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Collections;
import java.util.List;

public class ChatWindow implements Observer {

    private Controller controller;
    private JFrame frame;
    private JPanel panel;
    private JButton newConnectionButton;
    private JButton disconnectButton;
    private JButton sendButton;
    private JTextArea inputArea;
    private JTextArea usersList;
    private JLabel statusLabel;
    private JTextArea chatTextArea;
    private NewConnection newConnection;
    private boolean isRunning;

    public ChatWindow(Controller controller) {
        this.controller = controller;
        frame = new JFrame();
        frame.add(panel);
        frame.setTitle("Чат");
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        ((DefaultCaret) chatTextArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        addListeners();
    }

    private void addListeners() {
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                disconnect();
            }
        });

        newConnectionButton.addActionListener(e -> {
            if (isRunning) {
                controller.disconnect();
            }
            newConnection = new NewConnection(controller);
            newConnection.openDialog();
        });

        disconnectButton.addActionListener(e -> disconnect());

        sendButton.addActionListener(e -> {
            if (!isRunning) {
                return;
            }
            String message = inputArea.getText();
            if (message.equals("")) {
                return;
            }
            controller.sendUserMessage(message);
            inputArea.setText("");
        });
    }

    private void disconnect() {
        if (!isRunning) {
            return;
        }
        controller.disconnect();
    }

    @Override
    public void statusUpdated(boolean value) {
        isRunning = value;
        if (isRunning) {
            statusLabel.setText("онлайн");
            newConnection.setConfirmation(true);
        } else {
            statusLabel.setText("офлайн");
            usersList.setText("");
        }
    }

    @Override
    public void messageReceived(String value) {
        chatTextArea.append(value + System.lineSeparator());
    }

    @Override
    public void usersUpdated(List<String> users) {
        usersList.setText("");
        Collections.sort(users);
        for (String line : users) {
            usersList.append(line + System.lineSeparator());
        }
    }

    @Override
    public void newConnectionRejected(String systemMessage) {
        JOptionPane.showMessageDialog(new JPanel(), systemMessage, "Ошибка!", JOptionPane.INFORMATION_MESSAGE);
        newConnection.setConfirmation(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        final JLabel label1 = new JLabel();
        label1.setText("Cтатус:");
        panel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newConnectionButton = new JButton();
        newConnectionButton.setText("Новый чат");
        panel.add(newConnectionButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        disconnectButton = new JButton();
        disconnectButton.setText("Отключиться");
        panel.add(disconnectButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Пользователи онлайн");
        panel.add(label2, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, -1), null, 0, false));
        usersList = new JTextArea();
        usersList.setEditable(false);
        scrollPane1.setViewportView(usersList);
        sendButton = new JButton();
        sendButton.setText("Отправить");
        panel.add(sendButton, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusLabel = new JLabel();
        statusLabel.setText("офлайн");
        panel.add(statusLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane2.setHorizontalScrollBarPolicy(31);
        scrollPane2.setVerticalScrollBarPolicy(22);
        panel.add(scrollPane2, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 70), null, 0, false));
        inputArea = new JTextArea();
        inputArea.setLineWrap(true);
        inputArea.setWrapStyleWord(true);
        scrollPane2.setViewportView(inputArea);
        final JScrollPane scrollPane3 = new JScrollPane();
        scrollPane3.setVerticalScrollBarPolicy(22);
        panel.add(scrollPane3, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 300), null, 0, false));
        chatTextArea = new JTextArea();
        chatTextArea.setEditable(false);
        chatTextArea.setWrapStyleWord(true);
        scrollPane3.setViewportView(chatTextArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}